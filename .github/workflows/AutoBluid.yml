name: AutoBuild

on:
  push:
    branches: [ "main" ]
    paths-ignore:  # 忽略 .github/workflows 目录的更改
      - ".github/workflows/**"
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 生成唯一标签（包含日期和时间）
      - name: Generate unique tag
        id: generate_tag
        run: |
          export TZ="Asia/Shanghai"  # 设置时区为 UTC+8（北京时间）
          CURRENT_DATE=$(date +%Y%m%d)  # 获取当前日期，格式为年月日
          CURRENT_TIME=$(date +%H%M%S)  # 获取当前时间，格式为小时分钟秒
          TAG="SND-Scripts-CN特化版_1.00_${CURRENT_DATE}_${CURRENT_TIME}"  # 生成自定义标签，包含日期和时间
          echo "TAG=$TAG" >> $GITHUB_ENV  # 将 TAG 设置为环境变量
          echo "Generated tag: $TAG"

      # 3. 删除具有相同日期或更早日期的旧 Release 文件
      - name: Delete old releases with the same or earlier date
        run: |
          export TZ="Asia/Shanghai"  # 设置时区为 UTC+8（北京时间）
          CURRENT_DATE=$(date +%Y%m%d)  # 获取当前日期，格式为年月日

          # 获取所有 Release 的标签
          RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[].tag_name')

          # 遍历所有 Release 标签
          for TAG_NAME in $RELEASES; do
            # 提取标签中的日期部分
            RELEASE_DATE=$(echo "$TAG_NAME" | grep -oP '\d{8}')

            # 如果 Release 日期小于或等于当前日期，则删除该 Release
            if [[ "$RELEASE_DATE" && "$RELEASE_DATE" -le "$CURRENT_DATE" ]]; then
              echo "Deleting release with tag: $TAG_NAME"
              RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq '.id')
              curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
            fi
          done

      # 4. 打包代码为 ZIP 文件
      - name: Create ZIP archive
        run: |
          ZIP_NAME="${{ env.TAG }}.zip"  # 动态生成 ZIP 文件名
          zip -r "$ZIP_NAME" . -x '.git/*' -x '.github/*'
          echo "ZIP file created: $ZIP_NAME"
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV  # 将 ZIP 文件名设置为环境变量

      # 5. 创建 GitHub Release 并上传 ZIP 文件
      - name: Create Release and Upload Asset
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ZIP_NAME }}  # 使用动态生成的 ZIP 文件名
          tag_name: ${{ env.TAG }}  # 使用动态生成的标签
          name: ${{ env.TAG }}  # Release 名称与 TAG 一致
          generate_release_notes: true  # 自动生成 Release 说明
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6. 获取下载次数并更新 Release 描述
      - name: Update Release Description with Download Count
        run: |
          # 获取 Release ID
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG }}" | jq '.id')

          # 获取下载次数
          DOWNLOAD_COUNT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG }}" | jq '.assets[].download_count')

          # 更新 Release 描述
          curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"body": "Download count: '"$DOWNLOAD_COUNT"'\n\n'"$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG }}" | jq -r '.body')"'"}' \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"